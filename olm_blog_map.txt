

#1_ Прописываем наше созданное приложение blog в settings.py/INSTALLED_APPS

#2_ С помощью метода include переадресуем c main_blog/urls.py на файл blog/urls.py

#3_ Создаем файл blog/urls.py и заполняем его - указываем что надо выполнить метод views.posts_list

#5_ Возвращаем на исполнение метод render и указываем на наш шаблон blog/index.html
#6_ Вводим переменную context, в которой можем вносить данные в виде словаря

<!--7_ так передаем шаблону данные из view.py из словаря context метода posts_list-->

<!--8_ создаем  общий файл-шаблон blog/templates/blog/base_blog.html-->

<!--9_ Идем на сайт Bootstrap и забираем оттуда код шаблона из раздела Getting Started/CSS-->

<!--10_ Берем из Bootstrap какой небудь код Navbar и вставляем в body-->

<!--11_ Размечаем блоки -->

<!--12_ Делаем росширение общего шаблона-->

<!--13_ Переносим все в этот основной шаблон из base_blog.html-->

<!-- 14_ Росширяет шаблон base.html-->

#15_ Прописываем путь до папки templates (settings.py/TEMPLATES/'DIRS'), чтоб наш общий шаблон base.html могла находить система

#16_ Создаем класс модели Post в blog/models.py

# 17_Создаем поля для нашей модели Posts

#18_Создаем параметр - удобночитаемый урл (slug)

# 19_Создаем параметр для тела текста

# 20_ Создаем параметр даты публикации

# 21_ Создаем миграции - переносим нашу модель Post в базу данных (находясь в виртуальном окружении):

# 22_ Заходим в консоль Django чтоб через нее создавать обьекты модели Post в базе данных - создавать посты и управлять ими

# 23_Создаем переменную post - список постов из нашей модели (blog/views.py)

# 24_Заменяем {'names': names} на {'posts': posts}

<!-- 25_Заменяем /{/% for name in names /%/} и /{/{ name /}/} на /{/% for post in posts /%/} и /{/{ post.title /}/}-->

<!-- 26_Берем из Bootstrap/Card/Header and footer код и вставляем в него post.data_pub, post.title и post.body--> (blog/index.html)

<!-- 27_post.body|truncatewords:22 - это фильтр для шаблонов из документации django - означает что мы ограничиваем тексе 22-мя словами--> (blog/index.html)

# 28_Создаем имя для данного path(), чтоб по этому имени можно было б ссылаться в шаблонах html (blog/urls.py)

# 29_ Создаем новый урл-шаблон. <str:slug> - это именнованная группа символов - в данном случае это slug типа string. (blog/index.html)

<!-- 30_в параметр href записываем ссылку через имя параметра path() файла blog/urls.py--> (main_blog/base.html)

<!--31_Создаем шаблон для перехода на просмотр поста по кнопке Read--> (blog/post_detail.html)

<!-- 32_Подставляем в кнопку ссылку для перехода url 'post_detail_url' slug=post.slug--> (blog/index.html)

# 33_ Создаем метод для перехода по кнопке Read (blog/models.py)

<!-- 34_ Для получения ссылки вызываем метод post.get_absolute_url , который мы написали в blog/models.py-->
(blog/index.html)
-------------------------lesson_5_Tegs----------------------------

# 35_Создаем модель Tag для тэгов (blog/models.py)

# 36_Создаем параметр, связывающий два класса Post и Tag. blank=True - дозволяет посту не иметь тега. (blog/models.py)

# 37_ Заходим в консоль Django чтоб через нее создавать обьекты модели Tag в базе данных - создавать посты и управлять ими
    # python managt.py shell -  команда захода в консоль
	(смотри blog/models.py)
# 38_Создаем новый урл-шаблое для тэгов (blog/urls.py)

# 39_Создаем метод для тэгов (blog/views.py)

<!-- 40_Создаем файл-шаблон который расширяет base_blog.html--> (blog/tags_list.html)

<!-- 41_Создаем на кнопке Tags ссылку на страничку с тэгами--> (templates/base.html)

# 42_Создаем урл-шаблон для перехода на страничку тегов (blog/urls.py)

# 43_Создаем метод для странички тега (blog/view.py)

<!-- 44_Создаем шаблон tag_detail.html который расширяет шаблон base_blog.html--> (blog/tag_detail.html)

<!-- 45_Создаем заголовок странички - tag.title|title - |title - это фильтр, чтоб сделали заглавную букву большой-->(blog/tag_detail.html)

<!-- 46_Создаем страничку для всех тегов к данному посту, копируем шоблон из blog/index.html --> (blog/tag_detail.html)

<!-- 47_Создаем папку blog/includes в которой создаем файл-шаблон post_card_include.html-->

<!-- 48_Включаем шаблон из {% include 'blog/includes/post_card_include.html' %}--> (blog/tag_details.html)

# 49_Создаем в моделях метод для ссылки на конкретный обьект класса Tag (blog/models.py)

<!-- 50_Применяем метод tag.get_absolute_url для переадресации--> (blog/tag_list.html)

<!-- 51_Вставляем элемене для card-footer-перечисление тэгов к данному посту-->(blog/includes/post_card_include.html)

--------------------lesson_6_Mixins--------------------------------

# 52_Создаем класс PostDetail, переопределяем у него метод get, вставляем в метод get содержимое из метода post_detail (blog/view.py)

# 53_Меняем в урл-методе поле с методом из views.py - вместо post_detail указываем PostDetail.as_view() (blog/urls.py)

# 54_Создаем класс TagDetail, переопределяем у него метод get, вставляем в метод get содержимое из метода tag_detail

# 55_Меняем в урл-методе поле с методом из views.py - вместо post_detail указываем TagDetail.as_view() (blog/urls.py)

# 56_Теперь используем метод get_object_or_404 , чтоб при обращении по несущуствующуму адресу пользователю выдавалась надпись что страница - 404 (blog/views.py)

# 57_Теперь используем метод get_object_or_404 , чтоб при обращении по несущуствующуму адресу пользователю выдавалась надпись что страница - 404

# 58_Создаем файл utils.py, чтоб устранить избыточный код во views.py (blog/utils.py)

# 59_Создаем свой класс, определяем переменные для модели и шаблона (model, template) (blog/utils.py)

#60_ копируем метод get и изменяем его (blog/utils.py)

# 61_Импортируем класс ObjectDetailMixin и наследуемся от него в наших классах PostDetail и TagDetail (blog/views.py)

# 62_ Убираем методы get из классов (они будут наследоваться) и определяем переменные model и template (blog/views.py)

# >>> Post.mro() - метод mro() покажет порядок следования классов родителей.
# >>> class TagDetail(ObjectDetailMixin, View): - значит что ближайший родитель этого класса будет ObjectDetailMixin, а следующим - View
# >>> dir(obj) - посмотреть все методы, которые есть у этого обьекта

---------------------lesson_7_Forms--------------------------------

# 63_ Создаем новый модуль forms.py

# 64_Создаем класс модели для форм (blog/forms.py)

# >>> from blog.forms import TagForms
# >>> tf = TagForms()
# >>> tf.is_bound - метод показывает - заполенеы ли поля (связаны с какими то данными) или нет (True/False)
# >>> tf.is_valid() - метод показывает - есть ли какая либо информация или поля пустые (True/False)
# >>> tf.errors - метод выводит ошибки, если они есть
# >>> tf.cleaned_data - словарь с очищенными введенными данными
# >>> 

# 65_Переопределяем метод сохранения обьекта (blog/forms.py)

# 66_Создаем метод clean_slug(self) для приведения поля slug к нижнему регистру (blog/forms.py)

# 67_Создаем условие проверки на недопустимые нами слова для тегов (blog/forms.py)

# 68_Создаем урл-шаблон для формы создания тегов (blog/urls.py)

# 69_Создаем метод get класса TagCreate (blog/view.py)

<!-- 70_Создаем файл-шаблон tag_create.html, наследуем его от базового шаблона--> (blog/templates/blog/tag_create.html)

<!-- 71_Заполняем шаблон - делаем кнопку, применяем класс из Bootstrap для дизайна формы (div class='form-group')-->(blog/templates/blog/tag_create.html)

<!-- 72_Делаем вывод ошибок, если они есть-->(blog/templates/blog/tag_create.html)

# 73_Прописываем для наших полей ввода стилистику Bootstrap (blog/forms.py)

# 74_Создаем метод post в классе TagCreate, проверяем валидность введенной информации (blog/views.py)

# 75_ Делаем проверку на повторяющееся название slug (blog/forms.py)

# 76_Модернизируем наш класс TagForm , наследуя его от класса МodelForm и введя class Meta (blog/forms.py)

# 77_Убираем метод save(self), потому что метод ModelForm имеет встроеный метод save (blog/forms.py)

------------------------lesson_8_Create_Forms_Post-----------------
# 78_Создаем класс PostForms, в нем класс Meta, а в нем необходимые поля (blog/forms.py)

# 79_Создаем метод clean_slug(self) для приведения поля slug к нижнему регистру (blog/forms.py)

# 80_Создаем урл-шаблон для формы создания тегов (blog/urls.py)

# 81_Создаем метод get класса TagCreate (blog/views.py)

<!-- 82_Создаем файл-шаблон tag_create.html, наследуем его от базового шаблона--> (blog/templetes/blog/post_create_form.html)

# 82_Создаем метод post в классе TagCreate, проверяем валидность введенной информации (blog/views.py)

# 83_Создаем метод для автоматической генерации slug - def gen_slug(s)(blog/models.py)

# 84_Используем метод slugify - он автоматически из имени title делает slug (blog/models.py)

>>> allow_unicode = True - нужно включить, чтоб метод slugify понимал киррилицу

>>> time() - генерирует количество секунд с 1970 года да настоящего момента. Используем это как уникальный идентификатор (from time import time)

# 85_Переопределяем метод save класса Post - для того чтоб генерировать новый slug только при создании экземпляра класса Post.
(blog/models.py)

# 86_Переносим класс TagCreate из blog/views.py в blog/utils.py и делаем Миксин - наследуем в blog/views.py классы TagCreate и PostCreate от класса blog/utils.py/ObjectCreateMixin, оставляем только поля model_form и template

----------------lesson_9_Change_Post_Tag_by_form-------------------

#87 Создаем класс для изменения тэгов - class TagUpdate(View) (blog/view.py)

<!-- 88_Создаем шаблон tag_update_form.html для формы изменения тэгов--> (blog/templates/blog/tag_update_form.html)

# 89_Создаем урл-шаблон для перехода на страничку изменения тэга (blog/urls.py)

# 90_Создаем метод get_update_url(self) для ссылки на конкретный обьект - для class Tag и для class Post - создаем методы get и post. (blog/models.py)

#91 Создаем Mixin-класс для изменения тэгов - class ObjectUpdateMixin (blog/utils.py)

# 92_Создаем class PostUpdate(ObjectUpdateMixin, View) (blog/views.py)

# 93_Создаем урл-шаблон для перехода на страничку изменения поста

<!-- 94_Создаем файл-шаблон post_update_form.html, наследуем его от базового шаблона-->(blog/templates/blog/post_update_form.html)

-----------------lesson_10_Delete_forms_Post_and_Tag---------------

# 95_Создаем класс TagDelete для удаления тегов, в нем реализуем два метода - get и post (blog/views.py)

# 96_Создаем урл-шаблон для перехода на страничку удаления тега (blog/urls.py)

<!-- 97_Создаем шаблон формы удаления тегов--> (blog/templates/blog/tag_delete_form.html)

# 98_Создаем метод get_delete_url(self) для ссылки на конкретный обьект - для class Tag и для class Post - создаем методы get и post. (blog/models.py)

# 99 Создаем Mixin-класс для изменения тэгов - class ObjectDeleteMixin (blog/utils.py)

# 100_Создаем class PostDelete(ObjectUpdateMixin, View) (blog/views.py)

# 101_Создаем урл-шаблон для перехода на страничку удаления поста (blog/urls.py)

<!-- 102_Создаем шаблон формы удаления постов--> (blog/templates/blog/post_delete_form.html)

--------------------lesson_11_Custom_CSS---------------------------
<!-- 103_Определяем админ-панель-->(templates/base.html)

<!-- 104_Определяем блок admin-panel-->(blog/templates/blog/base_blog.html)

# 105_Создаем папку my_blog/static/css - для статических css-шаблонов

/*106_Создаем файл для стилей css */ (static/css/styles.css)

# 107_Заходим в main_blog/settings.py и определяем список STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static') под переменной STATIC_URL = '/static/'

<!-- 108_Пишем команду {% load static %}, чтоб иметь возможность импортировать css-статику--> (my_blog/templates/base.html)

<!-- 109_Пишем link для указания на наши стили href="{% static 'css/styles.css' %}"--> (my_blog/templates/base.html)

<!-- 109_Добавляем в класс align-items-center для назначения вертикального выравнивания админ-панели--> (my_blog/templates/base.html)

/* 110_Чтоб панель отоброзилась вертикольно надо после пункта 109_ указать display: block; */ (my_blog/static/css/styles.css)

# 111_Добавляем в class ObjectDetailMixin в context еще один атрибут - 'admin_object': obj (blog/utils.py)

<!-- 112_Передаем ссылки href="{{ admin_object.get_update_url }}" и href="{{ admin_object.get_delete_url }}"--> (base_blog.html)

# 113_Добавляем в class ObjectDetailMixin в context еще один атрибут - 'detail': True (blog/utils.py)

<!-- 114_Добавляем в class элементы edit и delete и параметр css - style="{% if detail %} display: block; {% endif %}" (base_block.html)

/* 115_Скроем эти кнопки, если мы находимся не в самом окне поста*/ (static/css/styles.css)

# 116_Копируем из Bootstrap из Home/Introduction код JS-скриптов и вставляем его в основной шаблон my_blog/templates/base.html - чтоб реализовать выпадающий список для кнопок нашего админ-меню

# 117_Копируем из Bootstrap из Components/Dropdowns код выпадающего меню - и вставляем его в base_blog.html

-------------------lesson_12_Access_limitation---------------------
# 118_Создаем файл views.py в main_blog, импортиреем метод redirect, создаем метов redirect_block(request)... (main_blog/views.py)

# >>> permanent=True - чтоб redirect стал постоянным (301), по умолчанию будет временный (302)

# 119_Прописываем запись path для того, чтоб совершался перезод на страницу постов по ''-адресу (main_block/urls.py)

# 120_Создаем суперюзера через терминал: pytho manage.py createsuperuser - заходим в админку через кнопку Admin нашей панельки управления, которая вертикальная и справа.

<!-- 121_Обьявляем условие отображения админ-панели -- толикао зарегистрированым админам вошедшим в свой аккаунт--> (templates/base.html)

# 122_Импортируем класс LoginRequiredMixin и вставляем его как ближайшего родителя в наши классы, доступ к которым мы хотим ограничить (blog/views.py) 

# 123_Включаем метод  raise_exeption из класса LoginRequiredMixin - чтоб при попытке входа без права доступа выдавалась ошибка 403 (blog/views.py)

# >>> django.contrib.auth - модуль для управления доступом,  ограничениями и безопасностью.

----------------------lesson_13_Add_Pagination---------------------

<!-- 124_Идем в Bootstrap/Pagination и берем оттуда код для пагинации и вставляем его в шаблое base.html--> (templates/base.html)

# 125_Создаем класс Meta в модели Post (blog/models.py), определяем список ordering=['-data_pub']- это значит что сортировка будет по дате создания поста (data_pub), знак минус указывает что располагаться посты будут от нового к старым. (blog/models.py)

# 126_Создаем класс Meta для тэгов. Сортировка тэгов будет по названиям в алфовитном порядке. (blog/models.py)

# 127_Импортируем класс Paginator и создаем в методе post_list обьект paginator, указываем модель posts и количества постов на страничке (blog/view.py)

# 128_Создаем обьект страници page с номером page_number (blog/views.py)

# 129_Заменяем в атрибуьте context значение posts на page.object_list (blog/view.py)

# 130_Создаем переменную page_number - номер страници. Извлекаем его из словаря GET обьекта request по ключу 'page'. Значение по умолчению ставим 1 - первую страницу. (blog/views.py)

# 131_Убираем свойство object_list - прописываем его в index.html (blog/views.py)

<!-- 132_Делаем в шаблоне через цикл for чтоб подставлялись цифры страниц  при пагинации --> (templates/base.html)

<!-- 133_Делаем условие, чтоб отображались кнопки страниц на две меньше текущей и на две больше --> (templates/base.html)

# 134_Переменная is_paginated может быть True или False - проверяет - есть ли еще страници (blog/views.py)

#135_Делаем проверку - Если есть предыдущие страници - тогда заполняется переменная prev_url (blog/views.py)

#136_Делаем проверку - Если есть следующие страници - тогда заполняется переменная next_url (blog/views.py)

# 137_Создаем словарь context для переменных (blog/view.py)

<!-- 138_Делаем чтоб работала кнопка Previous --> (templates/base.html)

<!-- 139_Делаем чтоб работала кнопка Next --> (templates/base.html)

<!-- 140_Отображать панельку страниц если страниц более чем одна --> (templates/base.html)

------------------lesson_14_Simple_Search--------------------------

# 141_Создаем переменную для поиска search_query, прописываем в ней ключ 'search', определим в шаблоне base.html в форме для поисковика (blog/views.py)

<!-- 142_Прописываем переменную name="search" - которая будет ключом словаря search_query = request.GET.get('search', '') и action="{% url 'post_list_url' %} --> (templates/base.html)

# 143_Формируем поиск по титлу и по телу поста через класс Q - поиск работал корректно (block/views.py)





















