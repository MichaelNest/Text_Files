

1) Строки
	print('Возраст {} -- {} лет.'.format(name, age))
   	print('Возраст {0} -- {1} лет.'.format(name, age)) - использование метода format

Таблица "Функции и методы строк"

Функция или метод					Назначение
S = 'str'; S = "str"; S = '''str'''; S = """str"""	Литералы строк
S = "s\np\ta\nbbb"			Экранированные последовательности
S = r"C:\temp\new"			Неформатированные строки (подавляют экранирование)
S = b"byte"				Строка байтов
S1 + S2					Конкатенация (сложение строк)
S1 * 3					Повторение строки
S[i]					Обращение по индексу
S[i:j:step]				Извлечение среза
len(S)					Длина строки
S.find(str, [start],[end])		Поиск подстроки в строке. Возвращает номер первого вхождения или -1
S.rfind(str, [start],[end])		Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
S.index(str, [start],[end])		Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
S.rindex(str, [start],[end])		Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
S.replace(шаблон, замена)		Замена шаблона
S.split(символ)				Разбиение строки по разделителю
S.isdigit()				Состоит ли строка из цифр
S.isalpha()				Состоит ли строка из букв
S.isalnum()				Состоит ли строка из цифр или букв
S.islower()				Состоит ли строка из символов в нижнем регистре
S.isupper()				Состоит ли строка из символов в верхнем регистре
S.isspace()				Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
S.istitle()				Начинаются ли слова в строке с заглавной буквы
S.upper()				Преобразование строки к верхнему регистру
S.lower()				Преобразование строки к нижнему регистру
S.startswith(str)			Начинается ли строка S с шаблона str
S.endswith(str)				Заканчивается ли строка S шаблоном str
S.join(список)				Сборка строки из списка с разделителем S
ord(символ)				Символ в его код ASCII
chr(число)				Код ASCII в символ
S.capitalize()				Переводит первый символ строки в верхний регистр, а все остальные в нижний
S.center(width, [fill])			Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
S.count(str, [start],[end])		Возвращает количество непересекающихся вхождений подстроки в диапазоне [начало, конец] (0 и длина строки по умолчанию)
S.expandtabs([tabsize])			Возвращает копию строки, в которой все символы табуляции заменяются одним или несколькими пробелами, в зависимости от текущего столбца. Если TabSize не указан, размер табуляции полагается равным 8 пробелам
S.lstrip([chars])			Удаление пробельных символов в начале строки
S.rstrip([chars])			Удаление пробельных символов в конце строки
S.strip([chars])			Удаление пробельных символов в начале и в конце строки
S.partition(шаблон)			Возвращает кортеж, содержащий часть перед первым шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий саму строку, а затем две пустых строки
S.rpartition(sep)			Возвращает кортеж, содержащий часть перед последним шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий две пустых строки, а затем саму строку
S.swapcase()				Переводит символы нижнего регистра в верхний, а верхнего – в нижний
S.title()				Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
S.zfill(width)				Делает длину строки не меньшей width, по необходимости заполняя первые символы нулями
S.ljust(width, fillchar=" ")		Делает длину строки не меньшей width, по необходимости заполняя последние символы символом fillchar
S.rjust(width, fillchar=" ")		Делает длину строки не меньшей width, по необходимости заполняя первые символы символом fillchar
S.format(*args, **kwargs)		Форматирование строки

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Обратный приоритет (от меньшего приоритета к большему):

Оператор 		Описание
lambda			лямбда-выражение
or 			Логическое “ИЛИ”
and 			Логическое “И”
not x 			Логическое “НЕ”
in, not in 		Проверка принадлежности
is, is not 		Проверка тождественности
<, <=, >, >=, !=, == 	Сравнения
| 			Побитовое “ИЛИ”
^ 			Побитовое “ИСКЛЮЧИТЕЛЬНО ИЛИ”
& 			Побитовое “И”
<<, >> 			Сдвиги
+, - 			Сложение и вычитание
*, /, //, % 		Умножение, деление, целочисленное деление и остаток от деления
+x, -x 			Положительное, отрицательное
~x 			Побитовое НЕ
** 			Возведение в степень
x.attribute 		Ссылка на атрибут
x[индекс] 		Обращение по индексу
x[индекс1:индекс2] 	Вырезка
f(аргументы ...) 	Вызов функции
(выражения, ...) 	Связка или кортеж 2
[выражения, ...] 	Список
{ключ:данные, ...} 	Словарь

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Списки - a = List() или a = []
Таблица "методы списков"
Метод				Что делает
list.append(x)			Добавляет элемент в конец списка
list.extend(L)			Расширяет список list, добавляя в конец все элементы списка L
list.insert(i, x)		Вставляет на i-ый элемент значение x
list.remove(x)			Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
list.pop([i])			Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]])	Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
list.count(x)			Возвращает количество элементов со значением x
list.sort([key=функция])	Сортирует список на основе функции
list.reverse()			Разворачивает список
list.copy()			Поверхностная копия списка
list.clear()			Очищает список
Нужно отметить, что методы списков, в отличие от строковых методов, изменяют сам список, 
а потому результат выполнения не нужно записывать в эту переменную.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Кортежи - неизменяемые списки. a = tuple() или a = ()
К ним пременимы все операции что и к спискам, кроме тех, которые могут их изменить

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5) Множества - "контейнер", содержащий не повторяющиеся элементы в случайном порядке.
a = set() или a = {}
ф = frozenset() - неизменяемое множество
С множествами можно выполнять множество операций: находить объединение, пересечение:

Метод    						Что делает
len(s) 							число элементов в множестве (размер множества).
x in s 							принадлежит ли x множеству s.
set.isdisjoint(other)   				истина, если set и other не имеют общих элементов.
set == other  						все элементы set принадлежат other, все элементы other принадлежат set.
set.issubset(other) или set <= other   			все элементы set принадлежат other.
set.issuperset(other) или set >= other  		аналогично.
set.union(other, ...) или set | other | ...     	объединение нескольких множеств.
set.intersection(other, ...) или set & other & ...   	пересечение.
set.difference(other, ...) или set - other - ...        множество из всех элементов set, не принадлежащие ни одному из other.
set.symmetric_difference(other); set ^ other 	  	множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
set.copy()  						копия множества.

И операции, непосредственно изменяющие множество:

set.update(other, ...); set |= other | ...  		объединение.
set.intersection_update(other, ...); set &= other & ... пересечение.
set.difference_update(other, ...); set -= other | ...   вычитание.
set.symmetric_difference_update(other); set ^= other    множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
set.add(elem)      					добавляет элемент в множество.
set.remove(elem) 					удаляет элемент из множества. KeyError, если такого элемента не существует.
set.discard(elem) 					удаляет элемент, если он находится в множестве.
set.pop() 						удаляет первый элемент из множества. Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.
set.clear() 						очистка множества.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6) Словари - способы создания:
Во-первых:
d = {'dict': 1, 'dictionary': 2}

Во-вторых, с помощью функции dict:
d = dict(short='dict', long='dictionary')

В-третьих, с помощью метода fromkeys:
d = dict.fromkeys(['a', 'b'])
{'a': None, 'b': None}
d = dict.fromkeys(['a', 'b'], 100)
{'a': 100, 'b': 100}

В-четвертых, с помощью генераторов словарей, которые очень похожи на генераторы списков.
d = {a: a ** 2 for a in range(7)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}


dict.clear() 				очищает словарь.

dict.copy() 				возвращает копию словаря.

classmethod dict.fromkeys(seq[, value]) создает словарь с ключами из seq и значением value (по умолчанию None).

dict.get(key[, default]) 		возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None).

dict.items() 				возвращает пары (ключ, значение).

dict.keys() 				возвращает ключи в словаре.

dict.pop(key[, default]) 		удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).

dict.popitem() 				удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены.

dict.setdefault(key[, default]) 	возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ с значением default (по умолчанию None).

dict.update([other]) 			обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!).

dict.values() 				возвращает значения в словаре.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7) Библиотека csv:

8) Библиотека bs4 - BeaurifulSoup

9) Библиотека peewee

10) Библиотека io

11) Библиотека multiprocessing - Pool

12) Библиотека time - sleep

13) Библиотека requests
	# r.headers - выводит словарь заголовков

14) Библиотека random - choice, uniform

15) Библиотека os
	if not os.path.exists(folder):           # проверяет наличие папки
        	os.makedirs(folder)              # создает папку
    	path = os.path.abspath(folder)           # абсолютный путь папки
16) Библиотека unittest

17) Библиотека ctypes - библиотека для работы с цветом

18) Библиотека datatime - datatime

19) Библиотека Tkinter - библиотека графического интерфейса

20) Библиотека urllib/urllib2

21)
--------------------------------------------------------------------------------------------------------------------
Другое:

r.replasce(',', '') --- # метод replace() - заменяет один элемент в строке на другой (',' на пустоту)
 # soup.find('div', class_ = 'links') - поиск первого попавшегося элемента
    # soup.find('div', {'class': 'links', 'id': '168.192.2222') - поиск первого попавшегося элемента
    # div = soup.find_all('a') - поиск всех элементов (список)
    # for a in div:
        # link = a.get('href') - вызов через get содержимого 'href'
    # parent, find_parent('div', class_='one') - искать ближайшего родителя, можно указать в скобках параметры нужного родителя
    # parents, find_parents('div') - искать всех родителей
    # next_element или next или next_sibling - следующий элемент в одной плоскости
    # previous_sibling - предыдущий элемент в одной плоскости
    # find_next_sibling('span') - ищет брата-соседа по метке 'span'
    # a = soup.find('a', href= re.compile('ya.ru)) - фильтр с регулярным выражением, выберет тот элемент, где есть 'ya.ru'
    # a = a.get('href') - get - возвращает содержимое тега 'href'
    # reg = r'\d{2}.\d{2}.\d{4}' - r - значит сырая строка, чтоб не читались спецсимволы. Регулярное выражение на формат даты
    # r'bing.com$' - '$' - значит что не надо учитывать символы после bing.com
    # r'\w\-' - буквы, цыфры и нижнее подчеркивание, '\' - экранирует символ, например дефис
    # r'^http' - '^' - означает что текст за '^' - это начало строки
    # os.system('cls') - очистить кран коммандной строки виндовз

















































