
--------------------------------------------------------------------------------------------------------------------
1) kivy.org --> Help --> Getting started with Kivy --> Installation --> тут инструкции по установке
2) Узнать версию своего питона --> python --version --> у меня Python 3.7.4
3) Обновить setuptools: python -m pip install --upgrade pip wheel setuptools virtualenv
4) Установить зависимости: python -m pip install docutils pygments pypiwin32 kivy_deps.sdl2==0.1.* kivy_deps.glew==0.1.*
			   python -m pip install kivy_deps.gstreamer==0.1.* --> Это для работы с медиа
5) Устанавить сам Kivy: python -m pip install kivy==1.11.1
6) Установить примеры Kivy: python -m pip install kivy_examples==1.11.1  Чтоб посмотреть путь примеров надо еще раз
									вбить эту строку
	c:\users\user\appdata\local\programs\python\python37-32\lib\site-packages (1.11.1) - мой путь примеров

7) Описание классов, методов и библиотек: kivy.org --> API Reference
8) http://www.blacksunsoftware.com/downloads.html - сайт производителя ColorMania 10.0
-----------------------------------------------------------------------------------------------------------------------						
					Kivy:
Установка гостевых дополнений на Xubuntu (https://help.ubuntu.ru/wiki/virtualbox):
1) Когда виртмашина запущна - зайти в настройки машины и выбрать гостевую папку, которая будет общей
2) В окне вирммашины вверху в меню: Выбрать Устройства - Подклучить образ диска... Подключится оптический диск с дополнениями
2.5) Набрать команду: sudo usermod -a -G vboxsf <USERNAME>
??3) Зайти по адресу: cd /media/xubuntu/VBox_GAs_6.0.6 
??4) Набрать команду: sudo sh ./VBoxLinuxAdditions.run - запустится этот файл
5) Перезапустить виртмашину
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
					Установка Kivy (Molchanov Lesson 1):
1) Набрать в браузере  get-pip download, на сайте нажать get-pip.py и скачать файл - файл скачается в /home/ubuntu/Downloads, а потом перенести в папку Distributives
2) ~/Distributives --> sudo apt-get install python3
3) ~/Distributives --> sudo apt-get install python3-distutils ---установим зависимости
4) ~/Distributives --> sudo python3 get-pip.py
5) Переходим на сайт kivy.org -- help -- getting started -- installation --- kivy.org/downloads --- установка под линукс
6) Пролистывоем страницу в самый низ и переходим в manually installing kivy from source, устанавливаем оттуда зависимости:
Ubuntu example¶
In the following commands replace all occurrences of python with python3 for Python 3.

# Install necessary system packages
sudo apt-get install -y \
    python3-pip \
    build-essential \
    git \
    python3 \
    python3-dev \
    ffmpeg \
    libsdl2-dev \
    libsdl2-image-dev \
    libsdl2-mixer-dev \
    libsdl2-ttf-dev \
    libportmidi-dev \
    libswscale-dev \
    libavformat-dev \
    libavcodec-dev \
    zlib1g-dev
7) Берем там зависимости, заменяет python && python-dev на python3 && python3-dev
8) Вставляем зависимость в терминал: ~/Desctop$ sudo apt-get install -y \...текст команды
9) Устанавливаем Cython : sudo pip3 install cython
10) Устанавливаем Kivy  : sudo pip3 install kivy
--------------------------------------------------------------------------------------------------------------------
					Установка Buildozer (Molchanov Lesson 1):
1) kivy.org -- Guides -- Programming Guide --Packaging your application -- Create a package for Android
2) Нажать на Install buildozer's dependencies -- Установить строку с зависимостями
sudo apt update
sudo apt install -y git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev
pip3 install --user --upgrade cython virtualenv  # the --user should be removed if you do this in a venv

3) Вернуться обратно до установки Бульдозера -- скачать с гитхаба по ссылке Buildozer: git clone https://github.com/kivy/buildozer.git
4) cd buildozer -- sudo python3 setup.py install -- учтановка бульдозера
5) Установка доп.зависимостей: sudo apt-get install libltdl-dev libffi-dev libssl-dev autoconf autotools-dev
6) Переходим в папку киви-проекта: cd TestKivy
7) Выполняем команду: buildozer init -- создался файл buildozer.spec
8) Компелируем apt-файл нашего приложения: buildozer android debug
9) Если что то пошло не так в установке - надо удалить в папеке проекта скрытую папку buildozer и папку bin и переустановить заново
--------------------------------------------------------------------------------------------------------------------
					Установка Kivy_examples (Molchanov Lesson 3):
1) Находясь в нашем случае в Рабочем Столе: python -m pip install kivy_examples
2) Или???: sudo apt-get install kivy-examples ---- скачиваем из репозитория
3) Или???: sudo pip3 install kivy-examples ------ 
	sudo apt update
	sudo apt install python-kivy-examples ---- вот это вот установилось!!! 
4) whereis kivy-examples --- покажет куда установился kivy-examples
5) Переходим в папку куда установилось kivy-examples
6) Там переходим в папку demo
7) Там переходим в папку kivycatalog
8) Там запускает файл main.py: python3 main.py - откроется окно виджета kivy-examples
	/usr/share/kivy-examples/demo/kivycatalog ---> python3 main.py

-------------------------------------------------------------------------------------------------------------------
                                            Kivy Molchanov
1) Layouts:
	- BoxLayout - вертикальное или горизонтальное расположение виджетов один за другим
	- GridLayout - сетка
	- AnchorLayout - девять точек расположения виджета
	- StackLayout - розмещает виджеты в строку или в столбик пока виджеты влазят. Потом переходит на новую стр/стлб
	- PageLayout - распологает виджеты на нескольких страницах
	- FloatLayout - расположение виджетов по абсолютным координатам относительно окна
	- RelativeLayout - расположение виджетов по координатам относительно размеров самого лайаута
	- Scetter        - реализует мультитач
2) Язык разметки .kv

3) Параметры виджетов:
	- orientation = 'vertical', 'gorizontal' - ориентация BoxLayout
	- padding = 50 - отступ от границ контейнера до его содержимого, может быть вида: 
			[50, 25] или [ 10, 15, 20, 25]
	- spacing = 50 - промежуток между виджетами (например кнопками)
	- size - фиксированый размер виджета в пикселях. При его использовании надо откл 
			size_hint = (None, None)
	- size_hint - адаптивный размер в процентах (.5, 1). Он приоритетнее чем size, поэтому 				надо применять None
	- size_hint_y: .4 --- если надо изменить розмер по Y.	
	- size_hint_x: .4 --- если надо изменить розмер по X.
	- pos - позиционирования виджета в пиксилях. Начало - левый нижний угол
	- pos_hint = {center_x = .5, center_y=.5}- адаптивные координаты виджета внутри родителя 
		в процентах от 0 до 1. (x, center_x, right)(y, center_y, top)
		pos_hint: {'center_x': .5, 'center_y' : .5}
		pos_hint: {'center_x': .5,'top':1}

	- multiline: False/True - одна или много строк для ввода в виджете TextInput
	- font_size: 40 - размер шрифта
		font_size: '25sp' ---  sp - значит подстраиваемый размер под параметры экрана
	- on_press:
	- on_release:
		self.text = 'On Release' - событие на кнопке - когда на кнопку нажимают и отпускают
	- halign: 'left'
    	  valign: 'middle'
    	  text_size: self.size --- связка команд, чтоб выравнять текст

	- from kivy.core.window import Window
	  Window.size = (480, 853) --- устанавливаем размер главного окна
	- from kivy.config import Config
	  Config.set('kivy', 'keyboard_mode', 'systemanddock') --- привязываем клавиатуру смартфона

	- input_type: 'number'
          input_filter: 'int' --- фильтры для ввода данных

4) Установить пакет KivyExamples для удобного просмотра и работы с изменениями виджетов (с 4:15 в ролике №3)

5) Установка пакета KivyMD:
	- Копируем репозиторий: git clone https://github.com/HeaTTheatR/KivyMD.git
	- Заходим в него в терминале и виполняем команду: sudo python3 ./setup.py install
	- Подключаем KivyMD к нашему проекту: from kivymd.themeing import ThemeManager
	- Создаем обьект темы - 'light':
			class MyApp(App):
    				theme_cls = ThemeManager()
    				title = 'Coppa App'
    				def build(self):
        				self.theme_cls.theme_style = 'light'
        				return Container()
	- Импортируем необходимые обьекты в файл .kv:
		#:import MDLabel kivymd.label.MDLabel
		#:import MDTextField kivymd.textfields.MDTextField
		#:import MDRaisedButton kivymd.button.MDRaisedButton
	- для исправления ошибки импорта элементов - надо загрузить в проект пакет 
		kivy-garden.kivymd
	- перед компиляцией надо произвести редакцию файла buildozer.spec:
		- изменить название приложения title
		- изменить на нужное название пакета package.name
		- добавить в шрифты шрифт ttf - source.include_exts = ...,ttf
		- подключение kivymd: requirements = python3,kivy --- скомпилировалось!!
		(requirements = kivy==1.11.1, git+https://github.com/HeaTTheatR/KivyMD.git)??????
	- компилируем приложение: buildozer android debug

6) Компиляция apt-файлов Kivy (https://habr.com/ru/post/479236/):
	- Запустите виртуальную машину XUbuntu, откройте терминал и выполните нижеследующую 		команду:
		--- wget https://github.com/HeaTTheatR/KivyMD-data/raw/master/install-kivy-buildozer-dependencies.sh
		--- chmod +x install-kivy-buildozer-dependencies.sh
		--- ./install-kivy-buildozer-dependencies.sh
	- Сохраните ваш код, откройте терминал в директории с файлом main.py и установите 			библиотеку KivyMD:
		--- sudo pip3 install kivymd
	- После установки можно протестировать наш код:
		--- python3 main.py
	- Дальше нам нужно создать файл спецификации buildozer.spec, который должен располагаться 			в той же директории, что и файл main.py:
		--- buildozer init
	- Эта команда создаст дефолтный файл спецификации. Откройте его и отредактируйте:
		--- [app]

			# (str) Title of your application
			title = KivyMDTest

			# (str) Package name
			package.name = kivymd_test

			# (str) Package domain (needed for android/ios packaging)
			package.domain = com.heattheatr

			# (str) Source code where the main.py live
			source.dir = .

			# (list) Source files to include (let empty to include all the files)
			source.include_exts = py,png,jpg,jpeg,kv,atlas,ttf

			# (list) Application version
			version = 0.0.1

			# (list) Application requirements
			# comma separated e.g. requirements = sqlite3,kivy
			requirements = python3,kivy==1.11.1,kivymd

			# (str) Supported orientation (one of landscape, sensorLandscape, portrait 				or all)
			orientation = portrait

			# (bool) Indicate if the application should be fullscreen or not
			fullscreen = 1

			# (list) Permissions
			android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE

			# (int) Target Android API, should be as high as possible.
			android.api = 28

			# (int) Minimum API your APK will support.
			android.minapi = 21

			# (str) Android NDK version to use
			android.ndk = 17c

			# (bool) If True, then skip trying to update the Android sdk
			# This can be useful to avoid excess Internet downloads or save time
			# when an update is due and you just want to test/build your package
			android.skip_update = False

			# (bool) If True, then automatically accept SDK license
			# agreements. This is intended for automation only. If set to False,
			# the default, you will be shown the license when first running
			# buildozer.
			android.accept_sdk_license = True

			# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, 			x86, x86_64
			android.arch = armeabi-v7a

			[buildozer]

			# (int) Log level (0 = error only, 1 = info, 2 = debug (with command 				output))
			log_level = 2

			# (int) Display warning if buildozer is run as root (0 = False, 1 = True)
			warn_on_root = 0

			# (str) Path to build artifact storage, absolute or relative to spec file
			build_dir = ./.buildozer

			# (str) Path to build output (i.e. .apk, .ipa) storage
			bin_dir = ./bin
	- И, собственно, запускаем процесс сборки командой в терминале:
		- buildozer android debug
	
















































